@import url("prosemirror-tables/style/tables.css");

.bn-editor {
  outline: none;
  padding-inline: 54px;

  /* Define a set of colors to be used throughout the app for consistency
  see https://atlassian.design/foundations/color for more info */
  --N800: #172b4d; /* Dark neutral used for tooltips and text on light background */
  --N40: #dfe1e6; /* Light neutral used for subtle borders and text on dark background */
}

/*
bn-root should be applied to all top-level elements

This includes the Prosemirror editor, but also <div> element such as 
Tippy popups that are appended to document.body directly
*/
.bn-root {
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
}

.bn-root *,
.bn-root *::before,
.bn-root *::after {
  -webkit-box-sizing: inherit;
  -moz-box-sizing: inherit;
  box-sizing: inherit;
}

/* reset styles, they will be set on blockContent */
.bn-default-styles p,
.bn-default-styles h1,
.bn-default-styles h2,
.bn-default-styles h3,
.bn-default-styles li {
  margin: 0;
  padding: 0;
  font-size: inherit;
  /* min width to make sure cursor is always visible */
  min-width: 2px !important;
}

.bn-default-styles {
  font-size: 16px;
  font-weight: normal;
  font-family: "Inter", "SF Pro Display", -apple-system, BlinkMacSystemFont,
    "Open Sans", "Segoe UI", "Roboto", "Oxygen", "Ubuntu", "Cantarell",
    "Fira Sans", "Droid Sans", "Helvetica Neue", sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

.bn-table-drop-cursor {
  position: absolute;
  z-index: 20;
  background-color: #adf;
  pointer-events: none;
}

.bn-drag-preview {
  position: absolute;
  top: 0;
  left: 0;
  padding: 10px;
  /* Sort of a hack but seems like the most reliable solution. */
  /* Drag preview element needs to be within bounds of the document area or it
   won't work in some cases. */
  /* Negative z-index covers most cases, but the element can still be visible
   if UI elements are translucent. */
  /* Setting opacity has no effect on the drag preview but does affect the
   element. Unless it's set to 0, in which case the drag preview also becomes
   hidden. So setting it to an extremely low value instead makes the element
   functionally invisible while not affecting the drag preview itself. */
  opacity: 0.001;
}

/**
Here be dragons!

The collaboration cursor caret needs to:
 - exist in the dom as a non-zero width element, so that when hovering over it, the label can display
 - yet, effectively not take up space in the dom, so that it doesn't cause wrapping or otherwise effect layout of the page

To achieve this, it took quite a bit of fiddling to figure out how to do this.

The caret is a span which has a before and after pseudo element.
The before element is what actually takes up space in the dom, and is colored via a border.
The color is actually set by reading the current color from the `.collaboration-cursor__caret` element. Allowing for dynamic coloring from JS.

There are a number of browser specific quirks with these hacks:
 - Firefox differs from Chrome & Safari in that it will split a word that is wrapping if not displayed as inline-block (whereas the others need display: inline)
 - Safari differs from Chrome & Firefox in that it needs the pseudo element to be position: absolute to display a pseudo-element element with a negative margin

The word-joiner char (\u2060) is used to make sure the caret doesn't wrap around the text.

Therefore if modifying this code, please test in all major browsers to ensure that the caret is rendered correctly in all browsers.
**/

/* Give a remote user a caret */
.collaboration-cursor__caret {
  position: relative;
  word-break: normal;
  white-space: nowrap !important;
}

/* Allow the caret to be colored & hovered over */
.collaboration-cursor__caret::before {
  /* Use currentColor to grab the color from the caret in set by JS */
  border-left: 2px solid currentColor;
  /* Make the cursor not actually take up the 2px of space within the element */
  margin-left: -2px;
  /* Fixes Safari's rendering of negative margin elements */
  position: absolute;
  /* Position the caret's height */
  top: 1px;
  bottom: -2px;
}

/* Firefox will split a word that is wrapping if not displayed as inline-block */
@-moz-document url-prefix() {
  .collaboration-cursor__caret::before {
    display: inline-block;
  }
}

/* Add a word-joiner (\u2060) char to each side of the caret */
.collaboration-cursor__caret::after,
.collaboration-cursor__caret::before {
  content: "⁠";
}

/* Render the username above the caret */
.collaboration-cursor__label {
  border-radius: 0 1.5px 1.5px 0;
  font-size: 12px;
  font-style: normal;
  font-weight: 600;
  line-height: normal;
  left: -2px;
  overflow: hidden;
  position: absolute;
  white-space: nowrap;
  user-select: none;

  color: transparent;
  max-height: 5px;
  max-width: 4px;
  padding: 0;
  top: -1px;
  transition: all 0.2s;
}

.collaboration-cursor__caret[data-active] > .collaboration-cursor__label {
  color: #0d0d0d;
  max-height: 1.1rem;
  max-width: 20rem;
  padding: 0.1rem 0.3rem;
  top: -17px;
  left: -2px;
  border-radius: 3px 3px 3px 0;

  transition: all 0.2s;
}

/* .tableWrapper {
  padding
} */

.bn-editor [data-content-type="table"] .tableWrapper {
  position: relative;
  top: -16px;
  left: -16px;
  /* padding: 16px; */
  min-width: calc(100% + 16px);
  padding-bottom: 16px;
  overflow-y: hidden;
}

.bn-editor [data-content-type="table"] .tableWrapper-inner {
  /* position: relative; */
  /* top: -16px;
  left: -16px; */
  padding: 16px;
}

/* table related: */
.bn-editor [data-content-type="table"] table {
  width: auto !important;
  word-break: break-word;
}
.bn-editor [data-content-type="table"] th,
.bn-editor [data-content-type="table"] td {
  border: 1px solid #ddd;
  padding: 5px 10px;
}

.bn-editor [data-content-type="table"] th {
  font-weight: bold;
  text-align: left;
}

/* tiptap uses colwidth instead of data-colwidth, se we need to adjust this style from prosemirror-tables */
.ProseMirror td,
.ProseMirror th {
  min-width: auto !important;
}
.ProseMirror td:not([colwidth]):not(.column-resize-dragging),
.ProseMirror th:not([colwidth]):not(.column-resize-dragging) {
  /* if there's no explicit width set and the column is not being resized, set a default width */
  min-width: var(--default-cell-min-width) !important;
}

.prosemirror-dropcursor-block {
  transition-property: top, bottom;
  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
  transition-duration: 0.15s;
}

.prosemirror-dropcursor-vertical {
  transition-property: left, right;
}
