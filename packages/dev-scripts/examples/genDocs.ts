import * as fs from "node:fs";
import * as path from "node:path";
import { fileURLToPath } from "node:url";
import {
  addTitleToGroups,
  getExampleProjects,
  getProjectFiles,
  groupProjects,
  Project,
} from "./util.js";

/*
 `genDocs` generates the nextjs example blocks for the website docs. 
 Note that these files are not checked in to the repo, so this command should always be run before running / building the site
 */
const dir = path.parse(fileURLToPath(import.meta.url)).dir;

const DOCS_DIR = path.resolve(dir, "../../../docs/");
const COMPONENT_DIR = path.resolve(DOCS_DIR, "./components/example/generated/");
const EXAMPLES_PAGES_DIR = path.resolve(DOCS_DIR, "./content/examples/");

/**
 * Generates the <ExampleBlock> component that has all the source code of the example
 * This block can be used both in the /docs and in the /example page
 */
async function generateCodeForExample(project: Project) {
  const projectFiles = getProjectFiles(project);
  const componentTarget = path.join(
    COMPONENT_DIR,
    "components",
    project.fullSlug,
  );
  const indexFile = path.join(componentTarget, "index.tsx");
  fs.rmSync(componentTarget, { recursive: true, force: true });
  fs.mkdirSync(componentTarget, { recursive: true });
  fs.writeFileSync(
    indexFile,
    `"use client";
import dynamic from "next/dynamic";
const Component = dynamic(() => import("./App"), {
  ssr: false,
});

export default Component;`,
  );

  projectFiles.forEach(({ filename, code }) => {
    const target = path.join(componentTarget, filename);
    fs.mkdirSync(path.dirname(target), { recursive: true });
    fs.writeFileSync(target, code);
  });
}

const templatePageForExample = (project: Project) => `---
title: ${project.title}
author: ${project.config.author}
---

${project.readme}
`;

/**
 * Generate the page for the example in /examples overview
 *
 * Consists of the contents of the readme
 */
async function generatePageForExample(project: Project) {
  const code = templatePageForExample(project);

  const target = path.join(EXAMPLES_PAGES_DIR, project.fullSlug + ".mdx");

  fs.writeFileSync(target, code);
}

/**
 * generates meta.json file for each example group, so that order is preserved
 */
async function generateMetaForExampleGroup(group: {
  title: string;
  slug: string;
  projects: Project[];
}) {
  if (!fs.existsSync(path.join(EXAMPLES_PAGES_DIR, group.slug))) {
    fs.mkdirSync(path.join(EXAMPLES_PAGES_DIR, group.slug));
  }

  const target = path.join(EXAMPLES_PAGES_DIR, group.slug, "meta.json");

  const meta = {
    title: group.title,
    pages: group.projects.map((project) => project.projectSlug),
  };

  const code = JSON.stringify(meta, undefined, 2);

  fs.writeFileSync(target, code);
}

/**
 * Generates the exampleGroups.gen.ts file, which contains all the necessary
 * data about the examples & their groups for the components we use in the
 * docs. E.g. the interactive demos and example cards.
 */
async function generateExampleGroupsData(projects: Project[]) {
  const target = path.join(COMPONENT_DIR, "exampleGroupsData.gen.ts");

  const groups = addTitleToGroups(groupProjects(projects));

  const exampleGroupsData = Object.values(groups).map((group) => ({
    exampleGroupName: group.slug,
    title: group.title,
    pathFromRoot: group.pathFromRoot,
    examplesData: group.projects.map((project) => ({
      exampleName: project.projectSlug,
      exampleGroupName: group.slug,
      title: project.title,
      author: project.config.author,
      isPro: project.config.pro || false,
      pathFromRoot: project.pathFromRoot,
      files: Object.fromEntries(
        getProjectFiles(project).map((file) => [
          file.filename.substring(1), // remove leading slash
          file.code,
        ]),
      ),
    })),
  }));

  const code = `// generated by dev-scripts/examples/genDocs.ts
export type ExampleGroupsData = {
  exampleGroupName: string;
  title: string;
  pathFromRoot: string;
  examplesData: {
    exampleName: string;
    exampleGroupName: string;
    title: string;
    author: string;
    isPro: boolean;
    pathFromRoot: string;
    files: Record<string, string>;
  }[];
}[];
export type ExampleData = ExampleGroupsData[number]["examplesData"][number];
export const exampleGroupsData: ExampleGroupsData = ${JSON.stringify(exampleGroupsData, undefined, 2)};
`;

  fs.writeFileSync(target, code);
}

async function addDependenciesToExample(project: Project) {
  const dependencies = project.config.dependencies || {};
  const devDependencies = project.config.devDependencies || {};
  if (
    Object.keys(dependencies).length > 0 ||
    Object.keys(devDependencies).length > 0
  ) {
    const packageJson = path.join(DOCS_DIR, "package.json");
    const packageJsonContent = fs.readFileSync(packageJson, "utf-8");
    const packageJsonObject = JSON.parse(packageJsonContent);
    packageJsonObject.dependencies = {
      ...packageJsonObject.dependencies,
      ...dependencies,
    };
    packageJsonObject.devDependencies = {
      ...packageJsonObject.devDependencies,
      ...devDependencies,
    };
    fs.writeFileSync(packageJson, JSON.stringify(packageJsonObject, null, 2));
  }
}

// clean old files / dirs
fs.rmSync(COMPONENT_DIR, { recursive: true, force: true });

fs.readdirSync(EXAMPLES_PAGES_DIR, { withFileTypes: true }).forEach((file) => {
  if (file.isDirectory()) {
    fs.rmSync(path.join(EXAMPLES_PAGES_DIR, file.name), {
      recursive: true,
      force: true,
    });
  }
});

// generate new files
const projects = getExampleProjects().filter((p) => p.config?.docs === true);
const groups = addTitleToGroups(groupProjects(projects));

for (const group of Object.values(groups)) {
  await generateMetaForExampleGroup(group);

  for (const project of group.projects) {
    // eslint-disable-next-line no-console
    console.log("generating docs for", project.fullSlug);
    await generateCodeForExample(project);
    await generatePageForExample(project);
    await addDependenciesToExample(project);
  }
}

await generateExampleGroupsData(projects);
