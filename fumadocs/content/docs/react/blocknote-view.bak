---
title: BlockNoteView
description: Learn how to render a BlockNote editor instance using the `BlockNoteView` component
imageTitle: BlockNoteView Component
---

The `BlockNoteView` component is the main component for rendering a BlockNote editor instance. It is a wrapper around the `BlockNoteEditor` instance and provides a simple way to render the editor in your application.

## Basic Usage

Here's a basic example of how to use the `BlockNoteView` component:

```tsx
import { BlockNoteView, useCreateBlockNote } from "@blocknote/react";

function MyEditor() {
  const editor = useCreateBlockNote();

  return <BlockNoteView editor={editor} />;
}
```

## Props

The `BlockNoteView` component accepts a number of props. You can find the full list of these below:

<auto-type-table
  path="../../../../packages/react/src/editor/BlockNoteView.tsx"
  name="BlockNoteViewProps"
/>

Additional props passed are forwarded to the HTML `div` element BlockNote renders internally.

## Examples

### Adding event handlers

You can handle events by passing event handlers to the `BlockNoteView` component.

```tsx
function EditorWithHandlers() {
  const editor = useCreateBlockNote({
    initialContent: [
      {
        type: "paragraph",
        content: "Start typing here...",
      },
    ],
  });

  const handleChange = (editor: BlockNoteEditor) => {
    // Handle content changes
    console.log("Content changed:", editor.getJSON());
  };

  const handleSelectionChange = (editor: BlockNoteEditor) => {
    // Handle selection changes
    const selection = editor.getSelection();
    console.log("Selection changed:", selection);
  };

  return (
    <BlockNoteView
      editor={editor}
      onChange={handleChange}
      onSelectionChange={handleSelectionChange}
    />
  );
}
```

### Editor with theme

The `theme` prop allows you to change the theme of the editor.

```tsx
function StyledEditor() {
  const editor = useCreateBlockNote();

  return (
    <div
      style={{ border: "1px solid #ccc", borderRadius: "8px", padding: "16px" }}
    >
      <BlockNoteView
        editor={editor}
        theme="dark"
        style={{ minHeight: "300px" }}
      />
    </div>
  );
}
```

### Disabling built-in UI elements

Sometimes you might need to disable the built-in UI elements and render your own. For example, you might want to render a custom formatting toolbar or side menu.

This allows you to "eject" from the default UI and render your own.

```tsx
function StyledEditor() {
  const editor = useCreateBlockNote();

  return (
    <BlockNoteView editor={editor} formattingToolbar={false}>
      <MyCustomFormattingToolbar />
    </BlockNoteView>
  );
}
```
